* AtCoder submit まとめ
** AtCoder Beginner Contest 219
*** A問題
    問題: https://atcoder.jp/contests/abc219/tasks/abc219_a

    提出: [[abc219/a.cpp]]

    そのまま場合分けしておわり．
    
*** B問題
    問題: https://atcoder.jp/contests/abc219/tasks/abc219_b

    提出: [[abc219/b.cpp]]

    Tの文字列をループさせて，1，2，3で条件分岐してansに文字列を連結していくだけ．

*** C問題
    問題: https://atcoder.jp/contests/abc219/tasks/abc219_c

    提出: [[abc219/c.cpp]]

    通常のアルファベット順に置き換えてsortしてから，元の順番に戻した．
    最初，数値に置き換えて文字列にしようとしたけど，2桁のものがでてくるからダメかと思って
    方向転換した．けどよく考えれば全然それでいけてたし，文字列じゃなくてただのvector<int>でとっても
    よかったかも．

*** D問題
    問題: https://atcoder.jp/contests/abc219/tasks/abc219_d

    提出: [[abc219/d.cpp]]

    DPだとわかったけど実装できなかったので解説AC．
    
** AtCoder Beginner Contest 218
*** A問題
    問題: https://atcoder.jp/contests/abc218/tasks/abc218_a

    提出: [[abc218/a.cpp]]

    文字列の指定番目がoかxか調べて答えを出力．

*** B問題
    問題: https://atcoder.jp/contests/abc218/tasks/abc218_b

    提出: [[abc218/b.cpp]]

    char分だけ足してあげればよいので，'a'だけ入力に加えて出力．

*** C問題
    問題: https://atcoder.jp/contests/abc218/tasks/abc218_c

    提出: [[abc218/c.cpp]]

    取り組み中…
    
** AtCoder Beginner Contest 217
*** A問題
    問題: https://atcoder.jp/contests/abc217/tasks/abc217_a

    提出: [[abc217/a.cpp]]

    stringで大小比較．

*** B問題
    問題: https://atcoder.jp/contests/abc217/tasks/abc217_b

    提出: [[abc217/b.cpp]]

    何を血迷ったかset_differenceとか使おうとして沼ったけど普通にsetから入力をeraseするだけ．

*** C問題
    問題: https://atcoder.jp/contests/abc217/tasks/abc217_c

    提出: [[abc217/c.cpp]]

    入力と同じ大きさの箱を用意して入力の場所にカウント変数を入れてくだけ．

*** D問題
    問題: https://atcoder.jp/contests/abc217/tasks/abc217_d

    提出: [[abc217/d.cpp]]

    setに切れ目を格納してc=2のときにlower_boundで上とprev(*itr)でその下を取ってその差を出力する．
    
** AtCoder Beginner Contest 216
*** A問題
    問題: https://atcoder.jp/contests/abc216/tasks/abc216_a

    提出: [[abc216/a.cpp]]

    substrで前と後ろから文字列として数字を取得して処理した．もっとうまくやる方法がありそう．
    
*** B問題
    問題: https://atcoder.jp/contests/abc216/tasks/abc216_b

    提出: [[abc216/b.cpp]]

    pairで名前を取ってきて，名前順にsort，前後で同じものがないか比較でおわり．

*** C問題
    問題: https://atcoder.jp/contests/abc216/tasks/abc216_c

    提出: [[abc216/c.cpp]]

    2で割れたら割って，無理だったら1ずつ引いていく．手順をメモしておいて最後に逆順に出力．

*** D問題
    問題: https://atcoder.jp/contests/abc216/tasks/abc216_d

    提出: [[abc216/d.cpp]]

    自力で実装したらTLEで死んだ．死んだやつはO(NM)になったけど，
    うまいこと差分だけを考える方法で実装するとO(N+M)でいける．
    
    最初に走査したときに消せる組み合わせの場所をqueueに突っこんでおいて，
    その後にloopでqueueの中身を1組ずつ消していき，次に出現する次の数について
    いままで出現した場所を記録してるmapと比べて差分ごとに更新していく．
    

** AtCoder Beginner Contest 215
*** A問題
    問題: https://atcoder.jp/contests/abc215/tasks/abc215_a

    提出: [[abc215/a.cpp]]

    `Hello,World!`と比較するだけ．

*** B問題
    問題: https://atcoder.jp/contests/abc215/tasks/abc215_b

    提出: [[abc215/b.cpp]]

    0になるまで2で割り続けるだけ．

*** C問題
    問題: https://atcoder.jp/contests/abc215/tasks/abc215_c

    提出: [[abc215/c.cpp]]

    入力をsortして，あとはnext_permutationで回しつつk番目で出力するだけ．
    
    next_permutation http://vivi.dyndns.org/tech/cpp/permutation

*** D問題
    問題: https://atcoder.jp/contests/abc215/tasks/abc215_d

    提出: [[abc215/d.cpp]]
    
    コンテスト中に愚直にgcd実装してやったらTLEで死亡した．
    エラトステネスの篩の容量でやるとうまく時間内に解ける．

    とても参考になった https://qiita.com/drken/items/a14e9af0ca2d857dad23
    
** AtCoder Beginner Contest 214
*** A問題
    問題: https://atcoder.jp/contests/abc214/tasks/abc214_a

    提出: [[abc214/a.cpp]]

    素直に条件分岐．
    
*** B問題
    問題: https://atcoder.jp/contests/abc214/tasks/abc214_b

    提出: [[abc214/b.cpp]]

    3重ループで条件を満たすときのみans++．

*** C問題
    問題: https://atcoder.jp/contests/abc214/tasks/abc214_c

    提出: [[abc214/c.cpp]]

    直接宝石を渡された時間と，前の人からもらった時間を比較して早いほうの時間を採用した．
    途中で直接渡された場合，2周しないと更新しきれないので2回同じ処理を回してAC．
    
*** D問題
    問題: https://atcoder.jp/contests/abc214/tasks/abc214_d

    提出: [[abc214/d.cpp]]

    解説見ながら解いた．大事なのは主客転倒をして重みwが計算された回数を数える方向にシフトすること．
    小さいものから順番に数えつつUnion-Findでグループ化していけばいい感じで解けた．
    Union-Findの実装はアルゴリズムとデータ構造（通称けんちょん本）を参考にした．

    主客転倒について

    https://physics0523.hatenablog.com/entry/2020/01/12/052513

    解説

    https://blog.hamayanhamayan.com/entry/2021/08/15/034729
   
** AtCoder Beginner Contest 213
*** A問題
    問題: https://atcoder.jp/contests/abc213/tasks/abc213_a

    提出: [[abc213/a.cpp]]

    両辺に対してAをxorすると，出力は A xor B，つまり ~A^B~ で良い．

*** B問題
    問題: https://atcoder.jp/contests/abc213/tasks/abc213_b

    提出: [[abc213/b.cpp]]

    一番大きい値と二番めに大きい値を保持してforを回す．
    pairに位置を持たせて入力でsortして下から2番目の位置の参照でも解ける．

*** C問題
    問題: https://atcoder.jp/contests/abc213/tasks/abc213_c

    提出: [[abc213/c.cpp]]
    
    力技で隣の数との差分の和を引いていくループを実装して計算したけど
    この問題は座標圧縮という典型アルゴリズムそのものらしい．

    座標圧縮の解説

    https://blog.hamayanhamayan.com/entry/2021/08/09/010106

    https://drken1215.hatenablog.com/entry/2021/08/09/235400


    座標圧縮で実装

    map [[abc213/c_map.cpp]]
    
    sort [[abc213/c_sort.cpp]]

*** D問題
    問題: https://atcoder.jp/contests/abc213/tasks/abc213_d

    提出: [[abc213/d.cpp]]
    
    深さ優先探索だ！！！となったけど実装がさっぱりだったので下記の参考サイトの
    DFSの実装を参考に書いたら通った．なんかsortするときのループの回数が一回足りてなくて
    ハマった…．

    DFS解説

    https://qiita.com/drken/items/4a7869c5e304883f539b

** AtCoder Beginner Contest 212
*** A問題
    問題: https://atcoder.jp/contests/abc212/tasks/abc212_a

    提出: [[abc212/a.cpp]]

    if文連打でおわり．

*** B問題
    問題: https://atcoder.jp/contests/abc212/tasks/abc212_b

    提出: [[abc212/b.cpp]]

    二つの処理を同時に処理しようとしたら沼ったのでリーダブルコードにも書いてある通り
    複数のタスクは一つずつ実装しましょう．
    flagで管理する形の問題は，デフォルトTrueでループの中などでFalseするのがみやすくてよい．
    あと複数の処理でflag管理するときは別々の変数作って，最後にorなどで出力を制御すると
    いいと学びました．(公式解説参照)
    
*** C問題
    問題: https://atcoder.jp/contests/abc212/tasks/abc212_c

    提出: [[abc212/c.cpp]]

    どうみても愚直に2重ループ回してもまにあわないのでlower_boundで可能性のある2択まで
    絞りこんで小さい方を採用する方法でループ回しておわり．
    解説では，AとBの要素の大きさを比較することでO(N+M)でループ回してて感動した．

*** D問題
    問題: https://atcoder.jp/contests/abc212/tasks/abc212_d

    提出: [[abc212/d.cpp]]

    どうみてもヒープでなんとかなりそうなので，priority_queueを使って実装した．
    どうしてもqueueの入口と出口で追加分の処理をしたかったので，
    queueに突っ込む前に現在までの追加分を引いて，出すときにその時の追加分を足す処理
    したらうまくいった．

    
    
